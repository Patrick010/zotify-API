{
    ".github/workflows/ci.yml": "This job runs on all PRs and serves as a gatekeeper .",
    ".github/workflows/pushmirror.yml": "Push a pull request onto the repo .",
    ".gitignore": "No description available",
    ".pre-commit-config.yaml": "No description available",
    "AGENTS.md": " Document is designed to solve a common problem in software development: ensuring documentation stays synchronized with the code . The goal is to enforce the project's **\"Living Documentation\"** policy by making",
    "Gonk/CODE_FILE_INDEX.md": " This file is auto-generated . Do not edit manually . Use this file to test the GonkCLI .",
    "Gonk/GonkCLI/DOCS_INDEX.md": " This document serves as the master index for all documentation related to the GonkCLI component .",
    "Gonk/GonkCLI/README.md": " The Gonk Command Line Interface (CLI) is a tool for interacting with the Zotify API from the command line . It is intended for developers and power users who want to script",
    "Gonk/GonkCLI/__init__.py": "Make Gonk and GonkCLI a Python package",
    "Gonk/GonkCLI/main.py": "Gonk CLI for interacting with the Zotify API .",
    "Gonk/GonkCLI/modules/__init__.py": "Make Gonk and GonkCLI modules a Python package .",
    "Gonk/GonkCLI/modules/jwt_mock.py": "Creates a JWTClient for the API - 007 .",
    "Gonk/GonkCLI/tests/__init__.py": "This file makes Gonk tests a Python package .",
    "Gonk/GonkCLI/tests/test_jwt_mock.py": "Example of how to use a JWT client",
    "Gonk/GonkUI/DOCS_INDEX.md": " This file is auto-generated . Do not edit manually . Use the contents of the document to help you understand the design of the Gonk Web UI .",
    "Gonk/GonkUI/README.md": " GonkUI is a web-based development and testing tool designed specifically for the Zotify API . It provides a rich user interface to streamline common development workflows and facilitate interactive API",
    "Gonk/GonkUI/app.py": "This is the main function of the Zotify application . It is the main function of Zotify .",
    "Gonk/GonkUI/docs/ARCHITECTURE.md": " The Gonk/GonkUI is a standalone web application built with Flask . It is designed to be completely independent of the main Zotify API application, acting only as an external",
    "Gonk/GonkUI/docs/CHANGELOG.md": " Initial version of the 'Gonk/GonksUI' developer tool has been added . Integration with `sqlite-web' for browsing the development database .",
    "Gonk/GonkUI/docs/CONTRIBUTING.md": " # Contributing Contributions are welcome! If you have a suggestion or find a bug, please open an issue to discuss it .",
    "Gonk/GonkUI/docs/USER_MANUAL.md": " Gonk Test UI is a standalone application with its own set of dependencies . Gonk/GonkUI is divided into two main sections for interacting with the Zotify API endpoints",
    "Gonk/GonkUI/pyproject.toml": "No description available",
    "Gonk/GonkUI/static/app.js": "Create the UI for the OpenAPI endpoints .",
    "Gonk/GonkUI/static/styles.css": "API 2 . 0 - > API 2 . 0 - > API 2 . 0 - > API 2 . 0 - > API 2 . 0 - > API 2 . 0 - > API 2",
    "Gonk/GonkUI/views/__init__.py": "This file makes Gonk GonkUI views a Python package .",
    "Gonk/GonkUI/views/jwt_ui.py": "Create a Blueprint for the test UI .",
    "Gonk/pyproject.toml": "No description available",
    "README.md": " The Zotify API Platform is a powerful, extensible, and provider-agnostic backend for managing and interacting with your music library . Users can manage profiles, preferences, liked tracks,",
    "api/.gitignore": "No description available",
    "api/MIGRATIONS.md": " This file tracks the database migrations for the Zotify API . Add a `server_default` of `true` to handle existing rows . Add `notifications_enabled` to",
    "api/alembic.ini": "No description available",
    "api/alembic/README": "No description available",
    "api/alembic/env.py": "This is the Alembic Config object that provides access to the logging configuration .",
    "api/alembic/script.py.mako": "No description available",
    "api/alembic/versions/5f96175ff7c9_add_notifications_enabled_to_.py": "Add notifications_enabled to UserPreferences Revision ID",
    "api/api_dumps/cache.json": "No description available",
    "api/api_dumps/downloads.json": "No description available",
    "api/api_dumps/logging.json": "No description available",
    "api/api_dumps/metadata.json": "No description available",
    "api/api_dumps/network.json": "No description available",
    "api/api_dumps/playlist.json": "No description available",
    "api/api_dumps/spotify.json": "No description available",
    "api/api_dumps/stubs.json": "No description available",
    "api/api_dumps/sync.json": "No description available",
    "api/api_dumps/system.json": "No description available",
    "api/api_dumps/tracks.json": "No description available",
    "api/api_dumps/user.json": "No description available",
    "api/docs/CHANGELOG.md": " The project adheres to a custom versioning scheme for pre-releases . The API-201 project is based on [Keep a Changelog](https://keepachangelog",
    "api/docs/CODE_FILE_INDEX.md": " Alembic environment script, configures and runs migrations . The file is auto-generated . Do not edit manually .",
    "api/docs/CODE_QUALITY_INDEX.md": " Document tracks the quality of every source code file in the project . Each file is assessed against the rubric defined below . Document is assigned two independent quality scores: one for documentation and one",
    "api/docs/DOCS_QUALITY_INDEX.md": " API-204 is an index for documents related to code quality standards and reports . This file is auto-generated . Do not edit manually .",
    "api/docs/MASTER_INDEX.md": " API Documentation Master Index serves as the central index for all documentation related to the Zotify API and its sub-modules . Phases 3–5 deliver the full core API, user authentication",
    "api/docs/manuals/API_DEVELOPER_GUIDE.md": " This document is for developers who wish to contribute directly to the Zotify API codebase . It outlines the development workflow, architectural patterns, and quality standards required for all contributions . For information",
    "api/docs/manuals/CICD.md": " This document provides a comprehensive overview of the CI/CD and local linting infrastructure used in this project . It is designed to be a reusable template that can be adapted for other projects",
    "api/docs/manuals/ERROR_HANDLING_GUIDE.md": " Generic Error Handling Module is the central system for processing all unhandled exceptions . The module is designed to be extensible without modifying its core code . All errors are automatically formatted into a standard",
    "api/docs/manuals/LOGGING_GUIDE.md": " Zotify Flexible Logging Framework is a first-class tool designed to give you maximum control over how your code generates and routes log events . The most powerful feature of the framework is",
    "api/docs/manuals/OPERATOR_MANUAL.md": " This manual provides detailed, actionable guidance for deploying, configuring, and maintaining the Zotify API in a production or semi-production environment . It assumes you have a working knowledge of",
    "api/docs/manuals/SYSTEM_INTEGRATION_GUIDE.md": " This document provides essential information for developers who need to integrate with or consume the Zotify API . It covers project setup, testing procedures, core architectural principles, and documentation conventions . The Zot",
    "api/docs/manuals/USER_MANUAL.md": " This manual explains how to consume the Zotify REST API to manage your music library . It is intended for end-users or client application developers . All protected endpoints require a valid API",
    "api/docs/providers/SPOTIFY.md": " The Spotify provider connector is the first provider to be integrated into the new provider-agnostic architecture . The current authentication flow is specific to Spotify's OAuth 2.0 implementation .",
    "api/docs/reference/API_REFERENCE.md": " This document provides a detailed reference for the Zotify API . It is generated from the OpenAPI 3.0 specification . For planned endpoints (not yet implemented) see `../../",
    "api/docs/reference/FEATURE_SPECS.md": " This document serves as the master index for all detailed feature specifications for the Gonk platform . The purpose of this system is to ensure that every feature, endpoint, and function in the code",
    "api/docs/reference/features/AUTHENTICATION.md": " API protects all API endpoints by requiring a valid, secret API key to be passed in the `X-API-Key` header of every request . If the key is missing or",
    "api/docs/reference/features/AUTOMATED_DOCUMENTATION_WORKFLOW.md": " 'Lint-docs.py' is a tooling tooling feature and has no API endpoints . 'Documentation-with-Code' is designed to fail the commit if",
    "api/docs/reference/features/DEVELOPER_FLEXIBLE_LOGGING_FRAMEWORK.md": " This module extends the current global error handling system into a fully programmable, developer-facing logging framework that becomes part of the API framework itself . Its purpose is to allow fine-gr",
    "api/docs/reference/features/PROVIDER_AGNOSTIC_EXTENSIONS.md": " Proposal extends the existing provider-agnostic design of the API by ensuring all features, endpoints, and modules—current and future—are documented with a consistent, detailed, and",
    "api/docs/reference/features/PROVIDER_OAUTH.md": " The system provides a generic set of endpoints to initiate and complete the OAuth2 login process for any supported provider . This allows the API to support authentication with multiple music service providers (",
    "api/docs/reference/source/ACTIONS____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/APP.js.md": " App uses the API-120 API language . The code is intended to use as a role and place in the project .",
    "api/docs/reference/source/APP.py.md": " # app.py: App is a project that uses the API-121 API . App is an application for a project with a role, purpose and place .",
    "api/docs/reference/source/AUDIT_API.py.md": " # audit_api.py is an API-122 application for audit-API-122 . The project's role, purpose and place are filled in .",
    "api/docs/reference/source/AUDIT_ENDPOINTS.py.md": " # audit_endpoints.py: # audit-endpoints . # audit/endpoints: Audit_Endpoints . Add code examples to the endpoints .",
    "api/docs/reference/source/AUTH.py.md": " # auth.py: Role / Purpose - (To be filled in) Role, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list of",
    "api/docs/reference/source/AUTH_STATE.py.md": " # auth_state.py: Role / Purpose - (To be filled in) Role / purpose - (to be filled out) # # auth-state: Place within Project Architecture",
    "api/docs/reference/source/BASE.py.md": " Base.py is based on an API-126 version of the Base API . The Base API is designed to provide a role, purpose and place in the project .",
    "api/docs/reference/source/CACHE.py.md": " # cache.py: Cache.py . # cache .py: Use the API-127 to fill in the role, purpose and place in the project . Add code examples to the",
    "api/docs/reference/source/CACHE_SERVICE.py.md": " # cache_service.py: Use the API-128 to create a role, purpose, place and place in project architecture . Add code examples to the project to add to cache .",
    "api/docs/reference/source/CONFIG.py.md": " # config.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture and Dependencies are filled in . Add code examples to the project's config.",
    "api/docs/reference/source/CONFIG_MODELS.py.md": " # config_models.py: Role / Purpose - (To be filled in) Role / purpose - Key Functions - Place within Project Architecture . Add code examples to the list of models",
    "api/docs/reference/source/CONFIG_SERVICE.py.md": " # config_service.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/CONSOLE_HANDLER.py.md": " # console_handler.py: Use the API-132 to create a role, purpose, place and place in project architecture . Add code examples to the project's code . Use the",
    "api/docs/reference/source/CRUD.py.md": " # crud.py: Use the API-133 to create a role, purpose, place and place in the project's architecture . Add code examples to the project .",
    "api/docs/reference/source/DATABASE_JOB_HANDLER.py.md": " # database_job_handler.py is an API-134 application for database jobs . The code is designed to fill in a role and place in the project's architecture .",
    "api/docs/reference/source/DATABASE____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/DB.py.md": " # db.py: Use the API-136 to create a role, purpose, place and place in project architecture . Add code examples to the project's code .",
    "api/docs/reference/source/DEPS.py.md": " # deps.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the deps .",
    "api/docs/reference/source/DOWNLOAD.py.md": " # download.py . Use the API-138 to create a role, place and place in the project's architecture . Add code examples to the project .",
    "api/docs/reference/source/DOWNLOADS.py.md": " # downloads.py . Use the API-139 to download code examples for the latest version of the project .",
    "api/docs/reference/source/DOWNLOAD_SERVICE.py.md": " Code Examples are available for download_service.py .",
    "api/docs/reference/source/ERROR_HANDLER____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/FILTERS.py.md": " # filters.py: Use the API-142 to fill in the role, purpose, place and place in project architecture . Add code examples to the filter .",
    "api/docs/reference/source/FORMATTER.py.md": " # formatter.py is a formatter of an API-143 formatter . The formatter is designed to fill in a role and place in the project's architecture .",
    "api/docs/reference/source/FUNCTIONAL_TEST.py.md": " # functional_test.py: Role / Purpose - (To be filled in) Role, Key Functions, Place within Project Architecture - Place within Architecture . Add code examples to functional_",
    "api/docs/reference/source/GENERATE_ENDPOINTS_DOC.py.md": " # generate_endpoints_doc.py: Use the API-145 to fill in the role, purpose and place in project architecture . Add code examples to the endpoints .",
    "api/docs/reference/source/GENERATE_OPENAPI.py.md": " # generate_openapi.py: Use the API-146 to create a role, purpose, place and place in project architecture . Add code examples to the code .",
    "api/docs/reference/source/GENERATE_SOURCE_DOCS.py.md": " # generate_source_docs.py: Use the API-147 to create your own source code . Add code examples to the code .",
    "api/docs/reference/source/GENERIC.py.md": " The API-148 project is a generic application for generic programming . The project's role, purpose and place are filled in . Add code examples to the project .",
    "api/docs/reference/source/GLOBALS.py.md": " # globals.py: Role / Purpose - (To be filled in) Role, Key Functions, Place within Project Architecture, Place in Project Architecture . # code examples: Add code",
    "api/docs/reference/source/HOOKS.py.md": " # hooks.py: Use the API-150 to create a role, purpose, place and place in project architecture . Add code examples to the list of hooks .",
    "api/docs/reference/source/JSON_AUDIT_HANDLER.py.md": " # json_audit_handler.py: Use the API-151 to test your knowledge of the project's role and purpose . Add code examples to the code .",
    "api/docs/reference/source/LINTER.py.md": " The API-152 linter.py is designed to fill in the role and purpose of the project . The code is intended to use as a tool to help users understand the project's",
    "api/docs/reference/source/LOGGING_CONFIG.py.md": " # logging_config.py: Logging_Config.py . # Logging-Config: Role / Purpose - (To be filled in) # Logged-Config is API",
    "api/docs/reference/source/LOGGING_FRAMEWORK____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/LOGGING_HANDLERS____INIT__.py.md": " # __init__.py: Role / Purpose - (To be filled in) # # # .py: Place within Project Architecture - Place within project Architecture . # . Add code",
    "api/docs/reference/source/LOGGING_SCHEMAS.py.md": " # logging_schemas.py: Logging_Schemas . # Logging-Scheme: Role / Purpose - (To be filled in) # Logged-",
    "api/docs/reference/source/LOGGING_SERVICE.py.md": " # logging_service.py: Logging_Service.py . # Logging-Service: Role, Purpose, Key Functions, Place within Project Architecture . Add code examples to the",
    "api/docs/reference/source/LOG_CRITICAL.py.md": " # log_critical.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to log-critical .",
    "api/docs/reference/source/MAIN.py.md": " # main.py: Use the API-159 to create a role, purpose, place and place in project architecture . Add code examples to the project .",
    "api/docs/reference/source/METADATA.py.md": " # metadata.py: Role, Purpose, Key Functions, Place within Project Architecture . Add code examples to the metadata . Use the API-160 to create your own metadata .",
    "api/docs/reference/source/METADATA_SERVICE.py.md": " # metadata_service.py is created using the API-161 . The metadata-service is designed to provide a role, purpose and place in the project .",
    "api/docs/reference/source/MODELS.py.md": " The API-162 is designed to provide a role, purpose and place in a project's architecture . The project is based on a project called 'Project Architecture' and 'Project Architect'",
    "api/docs/reference/source/NETWORK.py.md": " # network.py: Use the API-163 to create a network of applications . Add code examples to the project .",
    "api/docs/reference/source/NETWORK_SERVICE.py.md": " # network_service.py: Use the API-164 to create a role, purpose, place and place in project architecture . Add code examples to the project .",
    "api/docs/reference/source/NOTIFICATIONS.py.md": " # notifications.py: Use the API-165 to create a notification system for notifications . Add code examples to the system .",
    "api/docs/reference/source/NOTIFICATIONS_SERVICE.py.md": " # notifications_service.py: Use the API-166 to create a role, purpose, place and place in project architecture . Add code examples to the list of tasks to fill in",
    "api/docs/reference/source/PLAYLISTS.py.md": " Playlists.py is an API-167 playlists . Playlists are designed to fill in a role, a purpose, a function and a place in an architecture .",
    "api/docs/reference/source/PLAYLISTS_SERVICE.py.md": " Playlists_service.py uses the API-168 to create a playlists service . The project is based on a role, purpose and place in the project .",
    "api/docs/reference/source/PROVIDERS____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/REQUEST_ID.py.md": " Request_id.py is an API-170 application that uses Python's role and purpose . The code is designed to fill in a role and place in the project's architecture .",
    "api/docs/reference/source/ROUTES____INIT__.py.md": " # __init__.py: Role / Purpose - (To be filled in) # # # .py: Place within Project Architecture - Place within project Architecture . # . Add code",
    "api/docs/reference/source/SCHEMAS.py.md": " Scrammas.py is an API-172 project that uses a role, a purpose, a function and a place in a project's architecture . The project is designed to be a",
    "api/docs/reference/source/SEARCH.py.md": " Search for API-173: \"Search.py\" The search.py is a search for a project that uses a role, purpose and place in a project's architecture .",
    "api/docs/reference/source/SERVICE.py.md": " Service.py is an API-174 service . It is designed to provide a role, purpose and place in the project's architecture .",
    "api/docs/reference/source/SERVICES____INIT__.py.md": " # __init__.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to the list .",
    "api/docs/reference/source/SESSION.py.md": " # session.py: Use the API-176 to create a session . Add code examples to the project .",
    "api/docs/reference/source/SNITCH.go.md": " Snitch.go is an API-177 version of the snitch-enabled snitch application . Use this article's code to test your knowledge of snitch. Go to snitch",
    "api/docs/reference/source/SPOTIFY.py.md": " Role / Purpose - (To be filled in) Role, Key Functions, Place within Project Architecture - Place within Architecture . Code Examples - (Add code examples here)",
    "api/docs/reference/source/SPOTIFY_CONNECTOR.py.md": " # spotify_connector.py: Role / Purpose - (To be filled in) # Spotify_Connector . # Spotified_connectors: # spotified_",
    "api/docs/reference/source/SPOTI_CLIENT.py.md": " # spoti_client.py: Role / Purpose - (To be filled in) # Spoti_Client: Role, Purpose, Key Functions, Place within Project Architecture - (",
    "api/docs/reference/source/SYNC.py.md": " Sync.py is an API-181 version of a new version of sync.py . The code is intended to use as a tool for developing a new API .",
    "api/docs/reference/source/SYNC_SERVICE.py.md": " # sync_service.py: Use the API-182 to create a role, purpose, place and place in project architecture . Add code examples to the project .",
    "api/docs/reference/source/SYSTEM.py.md": " System.py is an API-183 version of a new version of the Django-Python-Python API . The code is intended to use as a tool for developing a new Python-",
    "api/docs/reference/source/TEST_AUTH_FLOW.py.md": " # test_auth_flow.py: Role / Purpose - (To be filled in) # Test_Auth_flow: Role, Purpose, Key Functions, Place within Project Architecture",
    "api/docs/reference/source/TRACKS.py.md": " # tracks.py: API-185 . Add code examples to the project .",
    "api/docs/reference/source/TRACKS_SERVICE.py.md": " # tracks_service.py: Role, Purpose, Key Functions, Place within Project Architecture, Place in Project Architecture . Add code examples to track_service .",
    "api/docs/reference/source/TRIGGERS.py.md": " # triggers.py: Use the API-187 to create a project with a role, purpose, place and place in the project . Add code examples to the project's code .",
    "api/docs/reference/source/USER.py.md": " Use the API-188 to create a user's role, purpose and place in the project's architecture . Add code examples to the project to create your own Python code .",
    "api/docs/reference/source/USER_SERVICE.py.md": " User_service.py is created using the API-189 API . The user_service is designed to provide a role, purpose and place in the project's architecture .",
    "api/docs/reference/source/WEBHOOK.py.md": " Webhook.py is a webhook application that uses the API-190 API . The code is designed to fill in a role and place in the project's architecture .",
    "api/docs/reference/source/WEBHOOKS.py.md": " Webhooks.py is an API-191 application that uses webhooks . It is designed to provide a role, purpose and place in the project's architecture .",
    "api/docs/system/ERROR_HANDLING_DESIGN.md": " This document provides the detailed technical design for the Generic Error Handling Module . The module serves as the central, platform-wide mechanism for intercepting, processing, logging, and responding to all",
    "api/docs/system/INSTALLATION.md": " This guide provides detailed instructions for installing and setting up the Zotify API . It is highly recommended to use a Python virtual environment . The API requires several environment variables to be set . The",
    "api/docs/system/PRIVACY_COMPLIANCE.md": " This document outlines how the Zotify API project complies with data protection laws . Zotify respects user privacy and commits to protecting personal data .",
    "api/docs/system/REQUIREMENTS.md": " This document lists the system and software requirements for running the Zotify API and its related tools . The application is developed and tested on Linux .",
    "api/docs/system/zotify-openapi-external-v1.json": "No description available",
    "api/docs/system/zotify-openapi-external-v1.yaml": "No description available",
    "api/logging_config.yml": "Zotify API Logging Service This file defines the handlers for the LoggingService .",
    "api/logging_framework.yml": "Configuration for the Flexible Logging Framework .",
    "api/mypy.ini": "No description available",
    "api/pyproject.toml": "No description available",
    "api/ruff.toml": "No description available",
    "api/src/storage/spotify_tokens.json": "No description available",
    "api/src/zotify_api/auth_state.py": "This module holds the shared constants for the authentication process .",
    "api/src/zotify_api/config.py": "Creates a new instance of pydantic s settings class .",
    "api/src/zotify_api/core/error_handler/__init__.py": "Define the public API of this module .",
    "api/src/zotify_api/core/error_handler/actions/__init__.py": "This file makes the actions directory a Python package .",
    "api/src/zotify_api/core/error_handler/actions/log_critical.py": "Log a message with CRITICAL level using the flexible logging framework .",
    "api/src/zotify_api/core/error_handler/actions/webhook.py": "Action to send a notification to a webhook .",
    "api/src/zotify_api/core/error_handler/config.py": "Implementation of the API - 031 .",
    "api/src/zotify_api/core/error_handler/formatter.py": "Formats errors into a standardized JSON structure for API responses or CLI output .",
    "api/src/zotify_api/core/error_handler/hooks.py": "Register the exception handler for the FastAPI .",
    "api/src/zotify_api/core/error_handler/triggers.py": "Manages the execution of actions based on configured triggers .",
    "api/src/zotify_api/core/logging_framework/__init__.py": "Public API for the flexible logging framework .",
    "api/src/zotify_api/core/logging_framework/filters.py": "A logging filter that redacts sensitive data from log records .",
    "api/src/zotify_api/core/logging_framework/schemas.py": "API - 027 Creates a model for all sinks .",
    "api/src/zotify_api/core/logging_framework/service.py": "API - 028 - Creates a base class for all log sinks .",
    "api/src/zotify_api/core/logging_handlers/__init__.py": "Make the logging_handlers directory a Python package .",
    "api/src/zotify_api/core/logging_handlers/base.py": "Abstract base class for all log handlers .",
    "api/src/zotify_api/core/logging_handlers/console_handler.py": "Creates a log handler that prints formatted log messages to the console .",
    "api/src/zotify_api/core/logging_handlers/database_job_handler.py": "Creates a handler that writes job status updates to the database .",
    "api/src/zotify_api/core/logging_handlers/json_audit_handler.py": "A log handler that writes structured JSON audit logs to a file .",
    "api/src/zotify_api/database/__init__.py": "The API - 428 ID is reserved for API - 428 .",
    "api/src/zotify_api/database/crud.py": "API - 045 - DownloadJob CRUD",
    "api/src/zotify_api/database/models.py": "API - 046 - Creates an ORM table for Playlists and Tracks",
    "api/src/zotify_api/database/session.py": "FastAPI dependency that provides a database session for a single request .",
    "api/src/zotify_api/globals.py": "API - 08 This function is deprecated and removed in the future .",
    "api/src/zotify_api/logging_config.py": "Setup logging for API - 049 .",
    "api/src/zotify_api/main.py": "Create a FastAPI instance with the default settings .",
    "api/src/zotify_api/middleware/request_id.py": "Create a request - id middleware for a request .",
    "api/src/zotify_api/models/config_models.py": "API - 052 - ConfigModel and ConfigUpdate",
    "api/src/zotify_api/models/sync.py": "Create a sync request for a playlist .",
    "api/src/zotify_api/providers/__init__.py": "The API - 438 ID is reserved for backwards compatibility .",
    "api/src/zotify_api/providers/base.py": "Constructs an abstract base class for a Spotify service provider .",
    "api/src/zotify_api/providers/spotify_connector.py": "Creates an instance of the Spotify API connector .",
    "api/src/zotify_api/routes/__init__.py": "This file makes the routes directory a Python package .",
    "api/src/zotify_api/routes/auth.py": "The spotify API endpoint . This endpoint is used to handle the OAuth2 login flow .",
    "api/src/zotify_api/routes/cache.py": "The cache endpoint provides a list of cache statistics .",
    "api/src/zotify_api/routes/config.py": "API - 060 Route to get config and update it",
    "api/src/zotify_api/routes/downloads.py": "API endpoint for downloading a set of tracks .",
    "api/src/zotify_api/routes/jwt_auth.py": "Login to Zotify and return an access token",
    "api/src/zotify_api/routes/network.py": "API endpoint for retrieving and updating network configuration .",
    "api/src/zotify_api/routes/notifications.py": "API - 064 - Notifications endpoint",
    "api/src/zotify_api/routes/playlists.py": "Zotify API endpoint for listing playlists .",
    "api/src/zotify_api/routes/search.py": "Search for tracks in zotify .",
    "api/src/zotify_api/routes/sync.py": "Triggers a global synchronization job . This is a global synchronization job .",
    "api/src/zotify_api/routes/system.py": "Reloads the logging framework configuration from the logging_framework . yml file at runtime .",
    "api/src/zotify_api/routes/tracks.py": "API - 69 - List all tracks and create a new track",
    "api/src/zotify_api/routes/user.py": "API endpoint for accessing user profile and preferences .",
    "api/src/zotify_api/routes/webhooks.py": "API - 071 - Register webhooks .",
    "api/src/zotify_api/schemas/auth.py": "The Spotify API -072 model class .",
    "api/src/zotify_api/schemas/cache.py": "Cache Clear Request - Cache Clear Response - Cache Status Response",
    "api/src/zotify_api/schemas/download.py": "ID is API - 074 - Created at",
    "api/src/zotify_api/schemas/generic.py": "API - 075 - Create a standard response object",
    "api/src/zotify_api/schemas/logging_schemas.py": "API - 076 LogUpdate and LogConfigResponse",
    "api/src/zotify_api/schemas/metadata.py": "MetadataUpdate and MetadataPatchResponse can be used to update metadata .",
    "api/src/zotify_api/schemas/network.py": "API - 078 - ProxyConfig and NetworkConfigResponse",
    "api/src/zotify_api/schemas/notifications.py": "Notification class . Notifications are created and updated by user .",
    "api/src/zotify_api/schemas/playlists.py": "Example of how to display a list of playlists .",
    "api/src/zotify_api/schemas/spotify.py": "Spotify 1 . 0 schemas have been moved to more appropriate locations or removed .",
    "api/src/zotify_api/schemas/system.py": "API - 082 - Created by Michael",
    "api/src/zotify_api/schemas/tracks.py": "API - 083 - Created Tracks",
    "api/src/zotify_api/schemas/user.py": "API - 084 API - 084",
    "api/src/zotify_api/schemas/webhooks.py": "ID is API - 085 and will be removed in future .",
    "api/src/zotify_api/services/__init__.py": "API - 4 . 0 API - 4 . 0",
    "api/src/zotify_api/services/auth.py": "Refreshes the access token using the stored refresh token and saves the new token to the database .",
    "api/src/zotify_api/services/cache_service.py": "This module is used to provide the business logic for the cache subsystem .",
    "api/src/zotify_api/services/config_service.py": "This module provides the business logic for the config subsystem .",
    "api/src/zotify_api/services/db.py": "Returns a database engine based on settings . database_uri",
    "api/src/zotify_api/services/deps.py": "Returns an API dependency that provides a fully authenticated Spotify client .",
    "api/src/zotify_api/services/download_service.py": "Creates new download jobs and adds them to the database queue .",
    "api/src/zotify_api/services/jwt_service.py": "Returns a user object from a JWT token .",
    "api/src/zotify_api/services/logging_service.py": "Creates a logging service that dispatches log messages to all relevant handlers .",
    "api/src/zotify_api/services/metadata_service.py": "API - 095 - Create a metadata service .",
    "api/src/zotify_api/services/network_service.py": "This module provides the business logic for the network subsystem .",
    "api/src/zotify_api/services/notifications_service.py": "Creates a notification for a user and marks it as read",
    "api/src/zotify_api/services/playlists_service.py": "Return a list of playlists and their mappings .",
    "api/src/zotify_api/services/search.py": "Perform a spotify search with the given query .",
    "api/src/zotify_api/services/spoti_client.py": "Creates a stateless client for interacting with the Spotify Web API .",
    "api/src/zotify_api/services/sync_service.py": "Sync service module . This module provides the business logic for the sync subsystem .",
    "api/src/zotify_api/services/tracks_service.py": "Get a list of tracks from the database .",
    "api/src/zotify_api/services/user_service.py": "Get user profile and preferences for a user .",
    "api/src/zotify_api/services/webhooks.py": "Register and unregister webhooks from the API .",
    "api/src/zotify_api/storage/user_data.json": "No description available",
    "api/src/zotify_api/temp_violation.py": "Create a temporary violation file in the temporary directory .",
    "api/tests/__init__.py": "The API - 234 ID is the API - 234 ID of the API .",
    "api/tests/conftest.py": "A test client that can be used in all tests .",
    "api/tests/test_cache.py": "Example of how to use the cache service .",
    "api/tests/test_config.py": "Example of how to use the config service .",
    "api/tests/test_download.py": "This is the main function of the test . It will be called by zotify_api .",
    "api/tests/test_network.py": "Example of how to use the network service .",
    "api/tests/test_notifications.py": "Example of how to create users and notifications .",
    "api/tests/test_playlists.py": "Example of how to use zotify .",
    "api/tests/test_system.py": "Example of how to use zotify .",
    "api/tests/test_tracks.py": "A test suite to test the database engine .",
    "api/tests/test_user.py": "Example of how to create a user .",
    "api/tests/unit/providers/test_spotify_connector.py": "Testing of the happy path for the OAuth callback .",
    "api/tests/unit/test_auth.py": "Test the spotify_api . main module",
    "api/tests/unit/test_cache_service.py": "API - 212 Tests cache state .",
    "api/tests/unit/test_config.py": "This file has been refactored .",
    "api/tests/unit/test_crud.py": "Mock the database session to return a chainable object .",
    "api/tests/unit/test_deps.py": "Example of how to get a SpotifyClient .",
    "api/tests/unit/test_error_handler.py": "Creates a mock logger to capture log messages .",
    "api/tests/unit/test_error_handler_actions.py": "Tests that the error handler logs a critical error and sends a webhook .",
    "api/tests/unit/test_flexible_logging.py": "Tests a Zotify API with a valid logging configuration .",
    "api/tests/unit/test_jwt_auth_db.py": "Test client authentication . This test is used to make sure that the user is logged in .",
    "api/tests/unit/test_logging_config.py": "Test that setup_logging calls logging . basicConfig .",
    "api/tests/unit/test_metadata_service.py": "Example of how to use metadata service .",
    "api/tests/unit/test_network_service.py": "This is a test for getting and updating the network configuration . It is a test to make sure the network configuration is correct .",
    "api/tests/unit/test_new_logging_system.py": "Creates a mock of the logging service .",
    "api/tests/unit/test_notifications_service.py": "This test is used by zotify_api .",
    "api/tests/unit/test_playlists_service.py": "Creates a mock that tests playlists .",
    "api/tests/unit/test_search.py": "Test for dependency overrides on Zotify .",
    "api/tests/unit/test_spoti_client.py": "Tests that the SpotiClient can successfully fetch tracks metadata and user data .",
    "api/tests/unit/test_sync.py": "Initialize a new Zotify API .",
    "api/tests/unit/test_tracks_service.py": "A Zotify API does not support GET and POST requests .",
    "api/tests/unit/test_user_service.py": "Zotify 2 . 0 test suite",
    "api/tests/unit/test_user_service_db.py": "Example of how to create a user in a database .",
    "api/tests/unit/test_webhooks.py": "API - 232 setup and test hooks",
    "project/ALIGNMENT_MATRIX.md": " The API Routes Layer includes a Pydantic Schema Layer, Business Logic Service Layer, Centralized Configuration, Flexible Logging Framework and System Routes & Health Checks . The",
    "project/ALIGNMENT_MATRIX.yml": "- - - - - - - - - - - - - - - - -",
    "project/BACKLOG.md": " Document serves as the tactical backlog for the Zotify API Platform . It contains a list of clearly defined, approved tasks for future implementation . The process for managing this backlog is defined in the",
    "project/CICD.md": " This document provides a high-level overview of the Continuous Integration / Continuous Deployment (CI/CD) pipeline for this project . It is intended for a project management and stakeholder audience",
    "project/DEPENDENCIES.md": " The goal is to maintain a lean, stable, and secure project by minimizing the number of external dependencies . A new dependency may only be added to the project if it meets all of the",
    "project/EXECUTION_PLAN.md": " This document provides a detailed breakdown of the tasks required to fulfill the [Canonical Roadmap]",
    "project/FUTURE_ENHANCEMENTS.md": " Document serves as a dedicated \"parking lot\" for new ambitions and feature ideas that have emerged during development but are not part of the current, committed roadmap . Document lists specific technical features",
    "project/HIGH_LEVEL_DESIGN.md": " Document outlines the high-level architecture, scope, and guiding principles for the ongoing Zotify API refactor . It serves as a blueprint for the development team to maintain alignment with long-",
    "project/LESSONS-LEARNT.md": " Project Flow Requirement: This file must be updated immediately after any lesson with project-wide or phase-relevant implications is identified . Reviewers must confirm updates during **phase review gates**",
    "project/LOGGING_PHASES.md": " This document tracks the phased design and implementation of the new Extendable Logging System . It defines each phase, current status, deliverables, and governance rules . All phases are aligned with",
    "project/LOGGING_SYSTEM_DESIGN.md": " Document outlines the architecture for a new, extendable logging system for the Zotify API . The goal is to create a robust, centralized service that can handle multiple logging scenarios (e.",
    "project/LOGGING_TRACEABILITY_MATRIX.md": " This document maps the high-level requirements for the new Extendable Logging System to the design artifacts that specify the solution and the backlog tasks that will implement it . This ensures that all",
    "project/LOW_LEVEL_DESIGN.md": " Low-Level Design (LLD) describes the specific implementation details of the Zotify API's subsystems . The Fast API uses several cross-cutting concerns to provide middle-ware to",
    "project/ONBOARDING.md": " Document is intended to bring a new developer up to speed on the project, providing guidance for understanding the architecture, workflows, and key artifacts . Review each document in order to efficiently onboard",
    "project/PID.md": " The Zotify API was originally built as a lightweight wrapper for a single use case . The project aims to refactor and expand the API to form a robust, scalable, and provider-",
    "project/PROJECT_BRIEF.md": " The Gonk API Refactoring and Enhancement project aims to refactor the existing Zotify-based API into a professional-grade, multi-service media automation platform . The original API",
    "project/PROJECT_PLAN.md": " The Zotify API project is a strategic refactor and enhancement of the original Zotify CLI tool . Its purpose is to transform the tool into a robust, scalable, and provider-agn",
    "project/PROJECT_REGISTRY.md": " Historical legacy entries preserved below . Document | Location | Description | Status . Document is intended for a project management and stakeholder audience . Document outlines the policy for adding new third-party dependencies",
    "project/QA_GOVERNANCE.md": " Document is the single source of truth for all Quality Assurance (QA) and governance policies for this project . The policies outlined here are enforced automatically by the project's tooling .",
    "project/ROADMAP.md": " Document provides a high-level, strategic roadmap for the Zotify API Platform . It outlines the development trajectory from the current stable state to future enhancements .",
    "project/SECURITY.md": " The Zotify API platform is designed with a \"secure by default\" philosophy . The platform uses a standard OAuth2 PKCE flow to authenticate with the Spotify API . Spotify O",
    "project/TASK_CHECKLIST.md": " Document all functional changes in every relevant doc: API reference, developer/operator guides, README if user-facing . Documenting changes must be included in the same commit as code changes",
    "project/USECASES.md": " Document captures realistic, demanding user scenarios that the API should ideally support . These use cases cover complex playlist operations, advanced audio handling, and end-to-end synchronization between local and Spotify",
    "project/USECASES_GAP_ANALYSIS.md": " Document compares the **desired capabilities** from USECASES.md with the **current** Zotify API implementation . The goal is to identify missing or partial functionality that must be",
    "project/api/endpoints.yaml": "No description available",
    "project/logs/ACTIVITY.md": " The root cause of the pipeline failure was a combination of incorrect data in the tag inventory and scripts with flawed logic . Fixed multiple scripts (repo_inventory_and_governance.",
    "project/logs/CURRENT_STATE.md": " The pipeline is now stable . The next developer can proceed with feature work, following the established traceability patterns .",
    "project/logs/SESSION_LOG.md": " Fixed multiple scripts (repo_inventory_and_governance.py, verify_alignment_migration .py, test_full_pipeline.sh) to",
    "project/logs/conversations.json": "File not found",
    "project/process/GAP_ANALYSIS_TEMPLATE.md": " Gap Analysis: [Feature/Process Name] * Describe the current situation in detail . Identify and describe the specific gaps between the Current State and the Desired Future State . Ident",
    "project/proposals/DBSTUDIO_PLUGIN.md": " Currently, database inspection for the Zotify API is handled by 'sqlite-web', which is integrated directly into the .Gonk/gonkUI` Flask application .",
    "project/proposals/DYNAMIC_PLUGIN_PROPOSAL.md": " Document proposes implementation of a 'dynamic plugin system' for the Flexible Logging Framework . This system will allow third-party developers to create their own custom sink implementations in separate,",
    "project/proposals/GONKUI_PLUGIN.md": " Document proposes that the existing `Gonk/gonkUI' Flask application be converted into a 'dynamic' plugin . This plugin will be a self-contained FastAPI",
    "project/proposals/GOVERNANCE_AUDIT_REFACTOR.md": " Document proposes a comprehensive refactoring of repository's governance audit script . The goal is to elevate the script from a basic inventory tool into a complete, automated audit system . The refact",
    "project/proposals/HOME_AUTOMATION_PROPOSAL.md": " Document proposes the official endorsement and creation of a dedicated integration for home automation platforms . The goal is to create a custom Home Assistant \"Integration\" that would expose Zotify entities and services",
    "project/proposals/LOW_CODE_PROPOSAL.md": " The Zotify API is becoming a powerful platform for developers . We need to provide integrations with popular low-code/no-code platforms . This document proposes the official endorsement and creation",
    "project/proposals/MULTI_SOURCE_METADATA_PROPOSAL.md": " The proposal outlines the system architecture, data model, API integration, security model, and a phased implementation plan . The proposed system consists of three new major components that integrate with the existing Zot",
    "project/proposals/NEW_PROPOSAL.md": " This is a test proposal to verify the linter functionality .",
    "project/proposals/QA_GATE_IMPLEMENTATION_PLAN.md": " Document outlines the phased implementation plan for creating a professional-level, multi-language QA Gate for the project . This system will complement the current, simpler linter with a robust set",
    "project/proposals/TRACE_INDEX_SCHEMA_ADAPTATION.md": " The initial version of the 'TRACE_INDEX.yml' file, generated by the `repo_inventory_and_governance.py, had an inconsistent Sche",
    "project/proposals/TRACE_INDEX_SCHEMA_FIX.md": " Document proposes and describes a \"schema fix\" for 'TRACE_INDEX.yml' The previous version listed all *expected* indexes for both registered and unregistered files",
    "project/reports/ALIGNMENT_INTEGRITY_SNAPSHOT.yml": "This file contains information about the lockdown phase of a document .",
    "project/reports/ALIGNMENT_VALIDATION_REPORT.txt": " Missing ID tags in 46643 files: -/./.venv/share/man/man1/bandit.1 - .scripts/verify_alignment_migration",
    "project/reports/ARCHIVE_ALIGNMENT_MATRIX_OLD.md": " # Archived Alignment Matrix Entries - id: SYS-02 description: Performance <200ms linked_docs: - HIGH_LEVEL_DESIGN.md . #",
    "project/reports/CONTENT_ALIGNMENT_REPORT.md": " The goal was to ensure that every registered artifact in the project is traced to a canonical feature or component ID . The process involved a systematic review of all registered files in `project/reports",
    "project/reports/DESCRIPTION_COMPLIANCE_REPORT.md": " Document-059 is a Compliance Report that documents are required to comply with the requirements of the Document-Next-Generation System .",
    "project/reports/DOCUMENT_TAG_INVENTORY.yml": "This file contains all of the information required to generate the alignment matrix .",
    "project/reports/GOVERNANCE_DEMO_REPORT.md": " Documented a live demonstration of the refactored governance audit script, `scripts/repo_inventory_and_governance.py . The demonstration consists of two main tests:",
    "project/reports/HANDOVER_BRIEF_CHATGTP.md": " The project is currently in API Phase 5b, with governance, QA, and documentation workflows partially implemented and audited . Your job is to internalize the current state of the",
    "project/reports/HANDOVER_BRIEF_JULES.md": " The primary goal was to establish an end-to-end traceability system . Every registered project artifact (code, documentation, etc.) is mapped to a canonical feature ID . This creates",
    "project/reports/PROJECT_AUDIT_FINAL_REPORT.md": " The Project Audit Final Report is a static template . It is automatically copied here for human review .",
    "project/reports/PROJECT_DOCUMENT_ALIGNMENT.md": " Project Document Alignment Report is fully Aligned . The report is based on a fully-aligned version of the document .",
    "project/reports/REPO_MANIFEST.md": " \"Verify_alignment_migration.py\" is a python3 script . Verifying alignment migration is a \"enhanced report\" by type (doc/code/config",
    "project/reports/SEMANTIC_ALIGNMENT_REPORT.md": "File not found",
    "project/reports/TRACE_INDEX.yml": "The Zotify API is a tool for interacting with the Zotify API .",
    "project/reports/TRACE_INDEX.yml.bak": "No description available",
    "scripts/CODE_FILE_INDEX.md": " This file is auto-generated . Do not edit manually . Use the file to test linter violations .",
    "scripts/api/docs/CODE_FILE_INDEX.md": "File not found",
    "scripts/api/docs/DOCS_QUALITY_INDEX.md": "File not found",
    "scripts/api/docs/MASTER_INDEX.md": "File not found",
    "scripts/api/src/zotify_api/temp_violation.py": "File not found",
    "scripts/audit_api.py": "Dynamically imports the FastAPI app discovers all GET routes that don t require path parameters and sends a request to each one to check its status .",
    "scripts/audit_endpoints.py": "Analyzes the FastAPI routes and prints out the status of each route .",
    "scripts/backfill_trace_meta.py": "Backfill metadata into TRACE_INDEX . yml .",
    "scripts/build_project_registry.py": "Builds a machine - readable project registry from the TRACE_INDEX . yml file .",
    "scripts/content_alignment_check.py": "This is the main entry point for the Content Alignment Check phase 2 .",
    "scripts/description_compliance_check.py": "This is the main entry point for OPS - 07 .",
    "scripts/doc-lint-rules.yml": "This file defines the documentation matrix for the custom linter .",
    "scripts/fix_tag_inventory.py": "Command line entry point for parsing DOCUMENT_TAG_INVENTORY . yml .",
    "scripts/functional_test.py": "OPS - 09 - OPS - 019 - OPS - 009",
    "scripts/generate_alignment_matrix_md.py": "Generate an alignment matrix markdown file from a YAML file .",
    "scripts/generate_endpoints_doc.py": "Generate the Zotify API endpoints markdown file .",
    "scripts/generate_openapi.py": "Generate OpenAPI spec for Zotify .",
    "scripts/generate_repo_manifest.py": "OPS - 013 - OPS - 013",
    "scripts/gonkui": "No description available",
    "scripts/lint_governance_links.json": "No description available",
    "scripts/lint_governance_links.py": "Generate PROJECT_DOCUMENT_ALIGNMENT . md and lint_governance_links . json .",
    "scripts/linter.py": "Full Linter and Logger for the repository .",
    "scripts/make_manifest.py": "Self - checking repository manifest generator . Regenerates manifest only if there are staged changes .",
    "scripts/manage_docs_index.py": "Implementation of the OPS - 019 module .",
    "scripts/migrate_alignment_matrix.py": "Migrates the legacy ALIGNMENT_MATRIX . md and generates a normalized ALIGNMENT_MATRIX . yml .",
    "scripts/migrate_and_tag_repository.py": "Migrates the entire repository applies unique file - type - aware ID tags to all relevant files and generates a comprehensive inventory .",
    "scripts/project/reports/TRACE_INDEX.yml": "File not found",
    "scripts/project_registry.json": "No description available",
    "scripts/propagate_descriptions.py": "OPS - 023 Regenerates the TRACE_INDEX . yml file in the current working directory with a unified table format .",
    "scripts/repo_governance.py": "This is the main entry point for OPS - 024 .",
    "scripts/repo_inventory_and_governance.py": "Installs the repo_inventory_and_governance . py module .",
    "scripts/run_e2e_auth_test.sh": "A script to run a full end - to - end test of the Spotify authentication flow .",
    "scripts/semantic_alignment_check.py": "Loads all files from the specified TRACE_INDEX . yml and returns a dictionary of all files that are marked as registered .",
    "scripts/start.sh": "Start the Zotify API server .",
    "scripts/test_auth_flow.py": "ID = OPS - 029 This is the OPS - 029 version of the API .",
    "scripts/test_full_pipeline.sh": "Run all tests in a single pipeline .",
    "scripts/test_single_config.sh": "Run a single config reset test on the project .",
    "scripts/validate_code_index.py": "Main function to compare indexed files vs actual files .",
    "scripts/verify_alignment_migration.py": "Enhanced alignment verification script . Summarizes missing or mismatched IDs clearly by type doc .",
    "scripts/verify_governance.py": "Verifies that all governance - related files in the project are present in PROJECT_REGISTRY . md .",
    "snitch/.golangci.yml": "No description available",
    "snitch/CODE_FILE_INDEX.md": " This file is auto-generated . Do not edit manually . The main Go source file is for the snitch module .",
    "snitch/DOCS_INDEX.md": " This file is auto-generated . Do not edit manually . Use the supplied information to help you install the snitch module .",
    "snitch/README.md": " Snitch is a short-lived, local OAuth callback HTTP listener written in Go . It is intended to be run as a standalone process during the authentication flow . Snitch listens on",
    "snitch/docs/ARCHITECTURE.md": " Snitch is a minimal, self-contained Go application that acts as a temporary, local callback listener for OAuth 2.0 flows . Its architecture is designed around a Zero Trust security",
    "snitch/docs/INSTALLATION.md": " Snitch is written in Go and requires a recent version of the Go toolchain to build and run . The application must be configured with the callback URL of the main Zotify API before",
    "snitch/docs/MILESTONES.md": " This document tracks key project milestones and events . Snitch project is considered feature complete and stable .",
    "snitch/docs/MODULES.md": " The Snitch application has been refactored into a single, self-contained Go file to resolve a persistent build issue .",
    "snitch/docs/PHASES.md": " This document provides a more detailed breakdown of the tasks required for each development phase .",
    "snitch/docs/PHASE_2_SECURE_CALLBACK.md": " This design has been superseded by the \"Zero Trust\" model . This model provides a higher level of security, including end-to-end encryption and replay attack prevention .",
    "snitch/docs/PHASE_2_ZERO_TRUST_DESIGN.md": " This document specifies a new, more robust security design for the Snitch OAuth callback flow . It replaces the previous \"Secure Callback\" design with a model that provides end-to",
    "snitch/docs/PROJECT_PLAN.md": " The Snitch module is a critical security and integration component of the Zotify API platform . It acts as a short-lived, local web server that captures the authorization token from Spotify and",
    "snitch/docs/ROADMAP.md": " Snitch Development Roadmap outlines the high-level, phased development plan for the Snitch subproject . The Snitch project aims to integrate Snitch with a parent process using basic Inter",
    "snitch/docs/STATUS.md": " # Snitch Project Status provides a live view of the project's progress . This document provides a status update for the Snitch project .",
    "snitch/docs/TASKS.md": " API-266 can be used to install a new version of the API module . The module is called 'API-266' and has been released since 2008 .",
    "snitch/docs/TEST_RUNBOOK.md": " As of Phase 5, Snitch is tightly integrated with the main Zotify API application and is no longer intended to be run manually . Manual testing of the complete flow requires running the main",
    "snitch/docs/USER_MANUAL.md": " Snitch is designed to handle the final step of an OAuth 2.0 authentication flow for command-line or headless applications . It catches the redirect, grabs the secret authentication code",
    "snitch/docs/phase5-ipc.md": " This document outlines the secure Inter-Process Communication (IPC) mechanism implemented between the Zotify API and the Snitch helper application . The communication relies on a one-shot IPC",
    "snitch/go.mod": "No description available",
    "snitch/snitch.go": "snitch is a small helper application for the Zotify API .",
    "tests/scripts/test_build_project_registry.py": "Tests for the correct build_project_registry script ."
}